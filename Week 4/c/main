#include <stdio.h>
#include "kernel.h"
#include "swis.h"
#include <stdint.h>

#define BITSPERRGBCOLOR 8
#define BYTESPERRGBVALUE 3
#define BITSPERCOLOR (BYTESPERRGBVALUE * BITSPERRGBCOLOR)
#define MATRIXAXISSIZE 8

static unsigned char LEDArray[193] = {[0 ... 192] = 0};

typedef struct iic_transfer {
	unsigned addr:8;
	unsigned :21;
	unsigned riscos_retry:1;
	unsigned checksumonly:1;
	unsigned nostart:1;
	union {
		unsigned checksum;
		void *data;
	} d;
	unsigned len;
} iic_transfer;

uint8_t ArrowUp[MATRIXAXISSIZE][MATRIXAXISSIZE][BYTESPERRGBVALUE] = {
    {{0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 30, 0}, {0, 30, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}},
    {{0, 0, 0}, {0, 0, 0}, {0, 30, 0}, {0, 30, 0}, {0, 30, 0}, {0, 30, 0}, {0, 0, 0}, {0, 0, 0}},
    {{0, 0, 0}, {0, 30, 0}, {0, 0, 0}, {0, 30, 0}, {0, 30, 0}, {0, 0, 0}, {0, 30, 0}, {0, 0, 0}},
    {{0, 30, 0}, {0, 0, 0}, {0, 0, 0}, {0, 30, 0}, {0, 30, 0}, {0, 0, 0}, {0, 0, 0}, {0, 30, 0}},
    {{0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 30, 0}, {0, 30, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}},
    {{0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 30, 0}, {0, 30, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}},
    {{0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 30, 0}, {0, 30, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}},
    {{0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 30, 0}, {0, 30, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}}};

int ReadJoyStick();
void ExecuteSWI(_kernel_swi_regs *regs, int swi);
int SetPixel(int xPos, int yPos, uint8_t RGB_Red, uint8_t RGB_Green, uint8_t RGB_Blue);

int main()
{
        struct iic_transfer iic_data_structure;
        iic_data_structure.addr = 0x46 << 1;
        iic_data_structure.nostart = 0;
        iic_data_structure.d.data = (int*)&LEDArray;
        iic_data_structure.checksumonly = 0;
        iic_data_structure.len = 193;
        iic_data_structure.riscos_retry = 1;
	_kernel_swi_regs regs;

	int x, y;

	for(x = 0; x < 8; x++)
	{
		for(y = 0; y < 8; y++)
		{
			SetPixel(x, y, ArrowUp[x][y][0], ArrowUp[x][y][1], ArrowUp[x][y][2]);
		}
	}

	regs.r[0] = (int)&iic_data_structure;
	regs.r[1] = 1;
	ExecuteSWI(&regs, OS_IICOp);

	int joystick = ReadJoyStick();
	while(1)
	{
		int temp = ReadJoyStick();
		if(joystick != temp)
		{
			printf("Joystick changed from %d to %d\n", joystick, temp);
			joystick = temp;
		}
	}

	printf("Done\n");
	return 0;
}
int ReadJoyStick()
{
	unsigned char buffer[2] = {0}, JoyStickData = 0xf2;
	_kernel_swi_regs regs;
	struct iic_transfer iic_data_structure[2];
	iic_data_structure[0].addr = 0x46 << 1;
	iic_data_structure[0].nostart = 0;
	iic_data_structure[0].d.data = (int*)&JoyStickData;
	iic_data_structure[0].checksumonly = 0;
	iic_data_structure[0].len = sizeof(JoyStickData);

	iic_data_structure[1].addr = (0x46 << 1) | 1;
	iic_data_structure[1].nostart = 0;
	iic_data_structure[1].d.data = (int*)&buffer;
	iic_data_structure[1].checksumonly = 0;
	iic_data_structure[1].len = sizeof(char) * 2;

	regs.r[0] = (int)&iic_data_structure[0];
	regs.r[1] = 2;

	ExecuteSWI(&regs, OS_IICOp);

	return buffer[1];
}

void ExecuteSWI(_kernel_swi_regs *regs, int swi)
{
	_kernel_oserror *err;
	err = _kernel_swi(swi, regs, regs);

	if(err != NULL)
		printf("%s %x\n", err->errmess, err->errnum);
}

int SetPixel(int xPos, int yPos, uint8_t RGB_Red, uint8_t RGB_Green, uint8_t RGB_Blue)
{
	if(xPos < 0 || xPos >= 8)
	{
		printf("Error\n");
		return 0;
	}
	else if(yPos < 0 || yPos >= 8)
	{
		printf("Error\n");
		return 0;
	}

	int LED_Register_Index_Starting_Point = (yPos * BITSPERCOLOR) + xPos;

	LED_Register_Index_Starting_Point++;
	LEDArray[LED_Register_Index_Starting_Point] = RGB_Red;
	LEDArray[LED_Register_Index_Starting_Point + 8] = RGB_Green;
	LEDArray[LED_Register_Index_Starting_Point + 16] = RGB_Blue;

	return 1;
}