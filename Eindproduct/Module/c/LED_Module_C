/* Includes*/
#include <stdio.h>
#include <stdint.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"
#include "LED_Module_H.h"

/* Definition of the LED Matrix I2C address*/
#define LED_MATRIX_I2C_ADDRESS 0x46

/* Defines for LED Matrix scaling*/
#define BITSPERRGBCOLOR 8
#define BYTESPERRGBVALUE 3
#define BITSPERCOLOR (BYTESPERRGBVALUE * BITSPERRGBCOLOR)
#define MATRIXAXISSIZE 8

/* Defines for the I2C Joystick values*/
#define JOY_UP 4
#define JOY_DOWN 1
#define JOY_LEFT 16
#define JOY_RIGHT 2
#define JOY_ENTER 8

/* Definition of the LED Matrix data array*/
static unsigned char LEDArray[193] = {0};

/* Type definition of the 'iic_transfer' structure which is used by the 'OS_IICOp' SWI*/
typedef struct iic_transfer {
	unsigned addr:8;
	unsigned :21;
	unsigned riscos_retry:1;
	unsigned checksumonly:1;
	unsigned nostart:1;
	union {
		unsigned checksum;
		void *data;
	} d;
	unsigned len;
} iic_transfer;

/* Definitions of the traffic signs*/
uint8_t RedCross[MATRIXAXISSIZE][MATRIXAXISSIZE][BYTESPERRGBVALUE] = {
    {{30, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {30, 0, 0}},
    {{0, 0, 0}, {30, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {30, 0, 0}, {0, 0, 0}},
    {{0, 0, 0}, {0, 0, 0}, {30, 0, 0}, {0, 0, 0}, {0, 0, 0}, {30, 0, 0}, {0, 0, 0}, {0, 0, 0}},
    {{0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {30, 0, 0}, {30, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}},
    {{0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {30, 0, 0}, {30, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}},
    {{0, 0, 0}, {0, 0, 0}, {30, 0, 0}, {0, 0, 0}, {0, 0, 0}, {30, 0, 0}, {0, 0, 0}, {0, 0, 0}},
    {{0, 0, 0}, {30, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {30, 0, 0}, {0, 0, 0}},
    {{30, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {30, 0, 0}}};

uint8_t ArrowRight[MATRIXAXISSIZE][MATRIXAXISSIZE][BYTESPERRGBVALUE] = {
    {{0, 0, 30}, {0, 0, 30}, {0, 0, 30}, {0, 0, 30}, {0, 0, 30}, {0, 0, 30}, {0, 0, 30}, {0, 0, 30}},
    {{0, 0, 30}, {0, 0, 30}, {0, 0, 30}, {30, 30, 30}, {30, 30, 30}, {0, 0, 30}, {0, 0, 30}, {0, 0, 30}},
    {{0, 0, 30}, {0, 0, 30}, {0, 0, 30}, {30, 30, 30}, {30, 30, 30}, {0, 0, 30}, {0, 0, 30}, {0, 0, 30}},
    {{0, 0, 30}, {0, 0, 30}, {0, 0, 30}, {30, 30, 30}, {30, 30, 30}, {0, 0, 30}, {0, 0, 30}, {0, 0, 30}},
    {{0, 0, 30}, {30, 30, 30}, {0, 0, 30}, {30, 30, 30}, {30, 30, 30}, {0, 0, 30}, {30, 30, 30}, {0, 0, 30}},
    {{0, 0, 30}, {0, 0, 30}, {30, 30, 30}, {30, 30, 30}, {30, 30, 30}, {30, 30, 30}, {0, 0, 30}, {0, 0, 30}},
    {{0, 0, 30}, {0, 0, 30}, {0, 0, 30}, {30, 30, 30}, {30, 30, 30}, {0, 0, 30}, {0, 0, 30}, {0, 0, 30}},
    {{0, 0, 30}, {0, 0, 30}, {0, 0, 30}, {0, 0, 30}, {0, 0, 30}, {0, 0, 30}, {0, 0, 30}, {0, 0, 30}}};

uint8_t ArrowLeft[MATRIXAXISSIZE][MATRIXAXISSIZE][BYTESPERRGBVALUE] = {
    {{0, 0, 30}, {0, 0, 30}, {0, 0, 30}, {0, 0, 30}, {0, 0, 30}, {0, 0, 30}, {0, 0, 30}, {0, 0, 30}},
    {{0, 0, 30}, {0, 0, 30}, {0, 0, 30}, {30, 30, 30}, {30, 30, 30}, {0, 0, 30}, {0, 0, 30}, {0, 0, 30}},
    {{0, 0, 30}, {0, 0, 30}, {30, 30, 30}, {30, 30, 30}, {30, 30, 30}, {30, 30, 30}, {0, 0, 30}, {0, 0, 30}},
    {{0, 0, 30}, {30, 30, 30}, {0, 0, 30}, {30, 30, 30}, {30, 30, 30}, {0, 0, 30}, {30, 30, 30}, {0, 0, 30}},
    {{0, 0, 30}, {0, 0, 30}, {0, 0, 30}, {30, 30, 30}, {30, 30, 30}, {0, 0, 30}, {0, 0, 30}, {0, 0, 30}},
    {{0, 0, 30}, {0, 0, 30}, {0, 0, 30}, {30, 30, 30}, {30, 30, 30}, {0, 0, 30}, {0, 0, 30}, {0, 0, 30}},
    {{0, 0, 30}, {0, 0, 30}, {0, 0, 30}, {30, 30, 30}, {30, 30, 30}, {0, 0, 30}, {0, 0, 30}, {0, 0, 30}},
    {{0, 0, 30}, {0, 0, 30}, {0, 0, 30}, {0, 0, 30}, {0, 0, 30}, {0, 0, 30}, {0, 0, 30}, {0, 0, 30}}};

uint8_t Stop[MATRIXAXISSIZE][MATRIXAXISSIZE][BYTESPERRGBVALUE] = {
    {{0, 0, 0}, {30, 30, 30}, {30, 30, 30}, {30, 30, 30}, {30, 30, 30}, {30, 30, 30}, {30, 30, 30}, {0, 0, 0}},
    {{30, 30, 30}, {30, 30, 30}, {30, 0, 0}, {30, 0, 0}, {30, 0, 0}, {30, 0, 0}, {30, 30, 30}, {30, 30, 30}},
    {{30, 30, 30}, {30, 0, 0}, {30, 0, 0}, {30, 0, 0}, {30, 0, 0}, {30, 0, 0}, {30, 0, 0}, {30, 30, 30}},
    {{30, 30, 30}, {30, 0, 0}, {30, 0, 0}, {30, 0, 0}, {30, 0, 0}, {30, 0, 0}, {30, 0, 0}, {30, 30, 30}},
    {{30, 30, 30}, {30, 0, 0}, {30, 0, 0}, {30, 0, 0}, {30, 0, 0}, {30, 0, 0}, {30, 0, 0}, {30, 30, 30}},
    {{30, 30, 30}, {30, 0, 0}, {30, 0, 0}, {30, 0, 0}, {30, 0, 0}, {30, 0, 0}, {30, 0, 0}, {30, 30, 30}},
    {{30, 30, 30}, {30, 30, 30}, {30, 0, 0}, {30, 0, 0}, {30, 0, 0}, {30, 0, 0}, {30, 30, 30}, {30, 30, 30}},
    {{0, 0, 0}, {30, 30, 30}, {30, 30, 30}, {30, 30, 30}, {30, 30, 30}, {30, 30, 30}, {30, 30, 30}, {0, 0, 0}}};

uint8_t PrioritySign[MATRIXAXISSIZE][MATRIXAXISSIZE][BYTESPERRGBVALUE] = {
    {{0, 0, 0}, {0, 0, 0}, {30, 30, 30}, {30, 30, 30}, {30, 30, 30}, {30, 30, 30}, {0, 0, 0}, {0, 0, 0}},
    {{0, 0, 0}, {30, 30, 30}, {30, 30, 30}, {30, 30, 0}, {30, 30, 0}, {30, 30, 30}, {30, 30, 30}, {0, 0, 0}},
    {{30, 30, 30}, {30, 30, 30}, {30, 30, 0}, {30, 30, 0}, {30, 30, 0}, {30, 30, 0}, {30, 30, 30}, {30, 30, 30}},
    {{30, 30, 30}, {30, 30, 0}, {30, 30, 0}, {30, 30, 0}, {30, 30, 0}, {30, 30, 0}, {30, 30, 0}, {30, 30, 30}},
    {{30, 30, 30}, {30, 30, 0}, {30, 30, 0}, {30, 30, 0}, {30, 30, 0}, {30, 30, 0}, {30, 30, 0}, {30, 30, 30}},
    {{30, 30, 30}, {30, 30, 30}, {30, 30, 0}, {30, 30, 0}, {30, 30, 0}, {30, 30, 0}, {30, 30, 30}, {30, 30, 30}},
    {{0, 0, 0}, {30, 30, 30}, {30, 30, 30}, {30, 30, 0}, {30, 30, 0}, {30, 30, 30}, {30, 30, 30}, {0, 0, 0}},
    {{0, 0, 0}, {0, 0, 0}, {30, 30, 30}, {30, 30, 30}, {30, 30, 30}, {30, 30, 30}, {0, 0, 0}, {0, 0, 0}}};

uint8_t Off[MATRIXAXISSIZE][MATRIXAXISSIZE][BYTESPERRGBVALUE] = {
    {{0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}},
    {{0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}},
    {{0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}},
    {{0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}},
    {{0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}},
    {{0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}},
    {{0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}},
    {{0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}}};

/* Definition of function prototypes*/
int SetPixel(int xPos, int yPos, uint8_t RGB_Red, uint8_t RGB_Green, uint8_t RGB_Blue);
void ExecuteSWI(_kernel_swi_regs *regs, int swi);

/* Function which activates when the 0x88000 SWI is called*/
_kernel_oserror *led_matrix_traffic_light(int swi_no, _kernel_swi_regs *r, void *private_word)
{
	/* Definition of an 'iic_transfer' struct
	   Configuring 'write-mode' by bitshifting the I2C address 1 place to the left and remaining the Least Significant Bit at 0*/
    struct iic_transfer iic_data_structure;
    iic_data_structure.addr = LED_MATRIX_I2C_ADDRESS << 1;
    iic_data_structure.nostart = 0;
    iic_data_structure.d.data = (int*)&LEDArray;
    iic_data_structure.checksumonly = 0;
    iic_data_structure.len = sizeof(LEDArray);
    iic_data_structure.riscos_retry = 1;

    /* Definition of a '_kernel_swi_regs' datatype*/
	_kernel_swi_regs regs;

	/* Definition of a temporarily place to store the LED data and the horizontal and vertical axis of the LED matrix*/
	uint8_t LEDArrayData[BITSPERRGBCOLOR][BITSPERRGBCOLOR][BYTESPERRGBVALUE];
	int x, y;

	/* Switch statement which checks the first register where the joystick value is stored
	   Stores the corresponding, three dimensional array the temporarily 'LEDArrayData' using the 'memcpy()' function*/
	switch((int)r->r[0])
	{
			case JOY_UP:
				memcpy(LEDArrayData, PrioritySign, sizeof(uint8_t) * MATRIXAXISSIZE * MATRIXAXISSIZE * BYTESPERRGBVALUE);
			break;
			case JOY_DOWN:
				memcpy(LEDArrayData, Stop, sizeof(uint8_t) * MATRIXAXISSIZE * MATRIXAXISSIZE * BYTESPERRGBVALUE);
			break;
			case JOY_LEFT:
				memcpy(LEDArrayData, ArrowLeft, sizeof(uint8_t) * MATRIXAXISSIZE * MATRIXAXISSIZE * BYTESPERRGBVALUE);
			break;
			case JOY_RIGHT:
				memcpy(LEDArrayData, ArrowRight, sizeof(uint8_t) * MATRIXAXISSIZE * MATRIXAXISSIZE * BYTESPERRGBVALUE);
			break;
			case JOY_ENTER:
				memcpy(LEDArrayData, RedCross, sizeof(uint8_t) * MATRIXAXISSIZE * MATRIXAXISSIZE * BYTESPERRGBVALUE);
			break;
			default:
            	memcpy(LEDArrayData, Off, sizeof(uint8_t) * MATRIXAXISSIZE * MATRIXAXISSIZE * BYTESPERRGBVALUE);
		    break;
	}

	/* For-loop which calls the 'SetPixel()' function for each LED on the LED matrix*/
	for(x = 0; x < MATRIXAXISSIZE; x++)
	{
		for(y = 0; y < MATRIXAXISSIZE; y++)
		{
			SetPixel(x, y, LEDArrayData[x][y][0], LEDArrayData[x][y][1], LEDArrayData[x][y][2]);
		}
	}

	/* Setting the first two SWI registers with a pointer to the data that will be sent and the amount of 'iic_transfers'
	   The second register also contains the I2C bus number, but it remains unset because it is 0*/
	regs.r[0] = (int)&iic_data_structure;
	regs.r[1] = 1;

	/* Calls the 'ExecuteSWI()' function*/
	ExecuteSWI(&regs, OS_IICOp);
	return 0;
}

/* 'main()' function which is activated when the module is being loaded
   Gives a confirmation to the user that the module is succesfully loaded*/
int main(int argc, char *argv[])
{
	printf("LED I2C Module succesfully loaded\n");
	return 0;
}

/* Function that executes a SWI and handles errors by notifying the user using the 'printf()' function*/
void ExecuteSWI(_kernel_swi_regs *regs, int swi)
{
	_kernel_oserror *err;
	err = _kernel_swi(swi, regs, regs);

	if(err != NULL)
		printf("%s %x\n", err->errmess, err->errnum);
}

/* Function that sets the required data in 'LEDArray' based on the given coordinates and RGB colours*/
int SetPixel(int xPos, int yPos, uint8_t RGB_Red, uint8_t RGB_Green, uint8_t RGB_Blue)
{
	/* Checks if the given coordinates are in range of the Sense Hat LED matrix*/
	if(xPos < 0 || xPos >= 8)
	{
		printf("Error\n");
		return 0;
	}
	else if(yPos < 0 || yPos >= 8)
	{
		printf("Error\n");
		return 0;
	}

	/* Calculates the starting index of the specified LED*/
	int LED_Register_Index_Starting_Point = (yPos * BITSPERCOLOR) + xPos + 1;

	/* Sets the RGB Colours in the 'LEDArray' using the calculated starting index*/
	LEDArray[LED_Register_Index_Starting_Point] = RGB_Red;
	LEDArray[LED_Register_Index_Starting_Point + 8] = RGB_Green;
	LEDArray[LED_Register_Index_Starting_Point + 16] = RGB_Blue;

	return 1;
}
